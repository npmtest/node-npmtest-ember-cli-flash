{"/home/travis/build/npmtest/node-npmtest-ember-cli-flash/test.js":"/* istanbul instrument in package npmtest_ember_cli_flash */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/lib.npmtest_ember_cli_flash.js":"/* istanbul instrument in package npmtest_ember_cli_flash */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_flash = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_flash = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-flash && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_flash */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_flash\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_flash.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_flash.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_flash.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_flash.__dirname + '/lib.npmtest_ember_cli_flash.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-cli-flash'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/components/flash-message.js":"import Ember from 'ember';\nimport layout from '../templates/components/flash-message';\n\nconst {\n  String: { classify, htmlSafe },\n  Component,\n  getWithDefault,\n  isPresent,\n  run,\n  on,\n  get,\n  set,\n  computed\n} = Ember;\nconst {\n  readOnly,\n  bool\n} = computed;\nconst {\n  next,\n  cancel\n} = run;\n\nexport default Component.extend({\n  layout,\n  active: false,\n  messageStyle: 'bootstrap',\n  classNameBindings: ['alertType', 'active', 'exiting'],\n\n  showProgressBar: readOnly('flash.showProgress'),\n  exiting: readOnly('flash.exiting'),\n  hasBlock: bool('template').readOnly(),\n\n  alertType: computed('flash.type', {\n    get() {\n      const flashType = getWithDefault(this, 'flash.type', '');\n      const messageStyle = getWithDefault(this, 'messageStyle', '');\n      let prefix = 'alert alert-';\n\n      if (messageStyle === 'foundation') {\n        prefix = 'alert-box ';\n      }\n\n      return `${prefix}${flashType}`;\n    }\n  }),\n\n  flashType: computed('flash.type', {\n    get() {\n      const flashType = getWithDefault(this, 'flash.type', '');\n\n      return classify(flashType);\n    }\n  }),\n\n  _setActive: on('didInsertElement', function() {\n    const pendingSet = next(this, () => {\n      set(this, 'active', true);\n    });\n    set(this, 'pendingSet', pendingSet);\n  }),\n\n  progressDuration: computed('flash.showProgress', {\n    get() {\n      if (!get(this, 'flash.showProgress')) {\n        return false;\n      }\n\n      const duration = getWithDefault(this, 'flash.timeout', 0);\n\n      return htmlSafe(`transition-duration: ${duration}ms`);\n    }\n  }),\n\n  click() {\n    const destroyOnClick = getWithDefault(this, 'flash.destroyOnClick', true);\n\n    if (destroyOnClick) {\n      this._destroyFlashMessage();\n    }\n  },\n\n  mouseEnter() {\n    const flash = get(this, 'flash');\n    if (isPresent(flash)) {\n      flash.deferTimers();\n    }\n  },\n\n  mouseLeave() {\n    const flash = get(this, 'flash');\n    if (isPresent(flash)) {\n      flash.resumeTimers();\n    }\n  },\n\n  willDestroy() {\n    this._super();\n    this._destroyFlashMessage();\n    cancel(get(this, 'pendingSet'));\n  },\n\n  // private\n  _destroyFlashMessage() {\n    const flash = getWithDefault(this, 'flash', false);\n\n    if (flash) {\n      flash.destroyMessage();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/flash/object.js":"import Ember from 'ember';\nimport customComputed from '../utils/computed';\n\nconst {\n  Object: EmberObject,\n  computed: { readOnly },\n  run: { later, cancel },\n  Evented,\n  get,\n  set\n} = Ember;\n\nexport default EmberObject.extend(Evented, {\n  timer: null,\n  exitTimer: null,\n  exiting: false,\n  initializedTime: null,\n\n  queue: readOnly('flashService.queue'),\n  totalTimeout: customComputed.add('timeout', 'extendedTimeout').readOnly(),\n  _guid: customComputed.guidFor('message').readOnly(),\n\n  init() {\n    this._super(...arguments);\n\n    if (get(this, 'sticky')) {\n      return;\n    }\n\n    this._setupTimers();\n    this._setInitializedTime();\n  },\n\n  destroyMessage() {\n    const queue = get(this, 'queue');\n\n    if (queue) {\n      queue.removeObject(this);\n    }\n\n    this.destroy();\n    this.trigger('didDestroyMessage');\n  },\n\n  exitMessage() {\n    set(this, 'exiting', true);\n\n    this._cancelTimer('exitTimer');\n    this.trigger('didExitMessage');\n  },\n\n  willDestroy() {\n    this._cancelAllTimers();\n\n    const onDestroy = get(this, 'onDestroy');\n\n    if (onDestroy) {\n      onDestroy();\n    }\n\n    this._super(...arguments);\n  },\n\n  deferTimers() {\n    if (get(this, 'sticky')) {\n      return;\n    }\n    let timeout = get(this, 'timeout');\n    let remainingTime = timeout - this._getElapsedTime();\n    set(this, 'timeout', remainingTime);\n\n    this._cancelAllTimers();\n  },\n\n  resumeTimers() {\n    if (get(this, 'sticky')) {\n      return;\n    }\n    this._setupTimers();\n  },\n\n  // private\n  _setTimer(name, methodName, timeout) {\n    return set(this, name, later(this, methodName, timeout));\n  },\n\n  _setupTimers() {\n    this._setTimer('exitTimer', 'exitMessage', get(this, 'timeout'));\n    this._setTimer('timer', 'destroyMessage', get(this, 'totalTimeout'));\n  },\n\n  _setInitializedTime() {\n    let currentTime = new Date().getTime();\n\n    set(this, 'initializedTime', currentTime);\n  },\n\n  _getElapsedTime() {\n    let currentTime = new Date().getTime();\n    let initializedTime = get(this, 'initializedTime');\n\n    return currentTime - initializedTime;\n  },\n\n  _cancelTimer(name) {\n    const timer = get(this, name);\n\n    if (timer) {\n      cancel(timer);\n      set(this, name, null);\n    }\n  },\n\n  _cancelAllTimers() {\n    const timers = ['timer', 'exitTimer'];\n\n    timers.forEach((timer) => {\n      this._cancelTimer(timer);\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/services/flash-messages.js":"import Ember from 'ember';\nimport FlashMessage from 'ember-cli-flash/flash/object';\nimport objectWithout from '../utils/object-without';\n\nconst {\n  Service,\n  assert,\n  copy,\n  getWithDefault,\n  isNone,\n  setProperties,\n  typeOf,\n  warn,\n  get,\n  set,\n  computed,\n  String: { classify },\n  A: emberArray\n} = Ember;\nconst {\n  equal,\n  sort,\n  mapBy\n} = computed;\n\nconst merge = Ember.assign || Ember.merge;\n\nexport default Service.extend({\n  isEmpty: equal('queue.length', 0).readOnly(),\n  _guids: mapBy('queue', '_guid').readOnly(),\n\n  arrangedQueue: sort('queue', function(a, b) {\n    if (a.priority < b.priority) {\n      return 1;\n    } else if (a.priority > b.priority) {\n      return -1;\n    }\n    return 0;\n  }).readOnly(),\n\n  init() {\n    this._super(...arguments);\n    this._setDefaults();\n    this.queue = emberArray();\n  },\n\n  add(options = {}) {\n    this._enqueue(this._newFlashMessage(options));\n\n    return this;\n  },\n\n  clearMessages() {\n    const flashes = get(this, 'queue');\n\n    if (isNone(flashes)) {\n      return;\n    }\n\n    flashes.clear();\n\n    return this;\n  },\n\n  registerTypes(types = emberArray()) {\n    types.forEach((type) => this._registerType(type));\n\n    return this;\n  },\n\n  peekFirst() {\n    return get(this, 'queue.firstObject');\n  },\n\n  peekLast() {\n    return get(this, 'queue.lastObject');\n  },\n\n  getFlashObject() {\n    const errorText = 'A flass message must be added before it can be returned';\n    assert(errorText, get(this, 'queue').length);\n\n    return this.peekLast();\n  },\n\n  _newFlashMessage(options = {}) {\n    assert('The flash message cannot be empty.', options.message);\n\n    const flashService = this;\n    const allDefaults = getWithDefault(this, 'flashMessageDefaults', {});\n    const defaults = objectWithout(allDefaults, [\n      'types',\n      'injectionFactories',\n      'preventDuplicates'\n    ]);\n\n    const flashMessageOptions = merge(copy(defaults), { flashService });\n\n    for (let key in options) {\n      const value = get(options, key);\n      const option = this._getOptionOrDefault(key, value);\n\n      set(flashMessageOptions, key, option);\n    }\n\n    return FlashMessage.create(flashMessageOptions);\n  },\n\n  _getOptionOrDefault(key, value) {\n    const defaults = getWithDefault(this, 'flashMessageDefaults', {});\n    const defaultOption = get(defaults, key);\n\n    if (typeOf(value) === 'undefined') {\n      return defaultOption;\n    }\n\n    return value;\n  },\n\n  _setDefaults() {\n    const defaults = getWithDefault(this, 'flashMessageDefaults', {});\n\n    for (let key in defaults) {\n      const classifiedKey = classify(key);\n      const defaultKey = `default${classifiedKey}`;\n\n      set(this, defaultKey, defaults[key]);\n    }\n\n    this.registerTypes(getWithDefault(this, 'defaultTypes', emberArray()));\n  },\n\n  _registerType(type) {\n    assert('The flash type cannot be undefined', type);\n\n    this[type] = ((message, options = {}) => {\n      const flashMessageOptions = copy(options);\n      setProperties(flashMessageOptions, { message, type });\n\n      return this.add(flashMessageOptions);\n    });\n  },\n\n  _hasDuplicate(guid) {\n    return get(this, '_guids').includes(guid);\n  },\n\n  _enqueue(flashInstance) {\n    const preventDuplicates = get(this, 'defaultPreventDuplicates');\n    const guid = get(flashInstance, '_guid');\n\n    if (preventDuplicates && this._hasDuplicate(guid)) {\n      warn('Attempting to add a duplicate message to the Flash Messages Service', false, {\n        id: 'ember-cli-flash.duplicate-message'\n      });\n      return;\n    }\n\n    return get(this, 'queue').pushObject(flashInstance);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/utils/computed.js":"import Ember from 'ember';\n\nconst {\n  typeOf,\n  get,\n  computed,\n  guidFor: emberGuidFor,\n  A: emberArray\n} = Ember;\n\nexport function add(...dependentKeys) {\n  const computedFunc = computed({\n    get() {\n      const values = dependentKeys.map((dependentKey) => {\n        const value = get(this, dependentKey);\n\n        if (typeOf(value) !== 'number') {\n          return;\n        }\n\n        return value;\n      });\n\n      return emberArray(values).compact().reduce((prev, curr) => {\n        return prev + curr;\n      });\n    }\n  });\n\n  return computedFunc.property.apply(computedFunc, dependentKeys);\n}\n\nexport function guidFor(dependentKey) {\n  return computed(dependentKey, {\n    get() {\n      const value = get(this, dependentKey);\n\n      return emberGuidFor(value.toString());\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/utils/object-compact.js":"import Ember from 'ember';\n\nconst {\n  isPresent\n} = Ember;\n\nexport default function objectCompact(objectInstance) {\n  const compactedObject = {};\n\n  for (let key in objectInstance) {\n    const value = objectInstance[key];\n\n    if (isPresent(value)) {\n      compactedObject[key] = value;\n    }\n  }\n\n  return compactedObject;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/utils/object-only.js":"export default function objectWithout(originalObj = {}, keysToRemain = []) {\n  let newObj = {};\n\n  for (let key in originalObj) {\n    if (keysToRemain.indexOf(key) !== -1) {\n      newObj[key] = originalObj[key];\n    }\n  }\n\n  return newObj;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-flash/node_modules/ember-cli-flash/addon/utils/object-without.js":"export default function objectWithout(originalObj = {}, keysToRemove = []) {\n  let newObj = {};\n\n  for (let key in originalObj) {\n    if (keysToRemove.indexOf(key) === -1) {\n      newObj[key] = originalObj[key];\n    }\n  }\n\n  return newObj;\n}\n"}